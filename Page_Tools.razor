@page "/tools"

<div class="bar">
    <div class="button"
         style="--icon:url(back.svg)"
         @onclick="Back_OnClick"></div>
</div>

<div class="content">
    <h2>Tools</h2>
    <div style="display: flex; justify-content: center; ">
        <div class="button with-text"
             style="--icon:url(add.svg)"
             @onclick="Add_OnClick">
            Scan QR-Code
        </div>
    </div>
    <div style="display: flex; justify-content: center; ">
        <div class="button with-text"
             style="--icon:url(import.svg)"
            @onclick="Import_OnClick">
            Import
        </div>
        <div class="button with-text"
             style="--icon:url(export.svg)"
            @onclick="Export_OnClick">
            Export
        </div>
    </div>

    <h2>Colors</h2>
    @for (var i = 0; i < Selection.data.colors.Count; i++)
    {
        var index = i;
        var color = Selection.data.colors[i];
        <div>
            <input @bind="color.name" />
            <input @bind="color.value" />
            <div class="color" style="background-color: @color.value; "></div>
            <div class="button"
                 style="--icon:url(close.svg)"
                 @onclick="() => DeleteColor(index)"></div>
        </div>
    }
    <div class="button"
         style="align-self:center;--icon:url(add.svg)"
         @onclick="AddColor"></div>
</div>

@using Microsoft.Maui.Storage

@using System.IO

@implements IAsyncDisposable

@inject NavigationManager nav

@code {

    public async ValueTask DisposeAsync()
    {
        await Selection.data.SaveAsync();
    }

    void Back_OnClick()
    {
        nav.NavigateTo("/");
    }

    async Task Import_OnClick()
    {
        var result = await FilePicker.Default.PickAsync();

        if (result is null)
            return;

        var import = await Data.LoadAsync(result.FullPath);
        Selection.data.Add(import);

        await Selection.data.SaveAsync();
    }

    async Task Export_OnClick()
    {
        string path = null;

        var downloadPath = PlatformUtils.GetDownloadFolder();

        while (path is null)
        {
            var ticks = DateTime.Now.Ticks;

            var _path = Path.Combine(
                downloadPath,
                $"data-{ticks}.json"
            );

            if (File.Exists(_path))
            {
                await Task.Delay(1000);
                continue;
            }

            path = _path;
        }

        await Selection.data.SaveAsync(path);
    }

    void Add_OnClick()
    {
        var page = new Page_QrCodeScanner();

        page.Disappearing += async (sender, e) =>
        {
            var dirty = false;

            if (page.ShouldClear)
            {
                Selection.data.items.Clear();
                dirty = true;
            }

            if (page.Item is not null)
            {
                Selection.data.Add(page.Item);
                dirty = true;
            }

            if (dirty)
            {
                await Selection.data.SaveAsync();
            }
        };

        Utils.Navigation.PushModalAsync(page);
    }

    void DeleteColor(int index)
    {
        Selection.data.colors.RemoveAt(index);
    }

    void AddColor()
    {
        Selection.data.colors.Add(new());
    }
}
