@page "/tools"

<div class="bar">
    <Component_Button Icon="back" OnClick="Back_OnClick" />
</div>

<div class="content">
    <h2>Settings</h2>
    <div style="display: flex; justify-content: center; margin: 0 1em; ">
        <input type="checkbox" @bind="Selection.data.showNextOtp" style="flex: 0 0 1.25em; aspect-ratio: 1; " />
        <label style="flex: 1; ">Show next password</label>
    </div>

    <h2>Data</h2>
    <div style="display: flex; justify-content: center; ">
        <Component_Button Icon="add" Text="Scan QR Code" OnClick="Add_OnClick" />
    </div>
    <div style="display: flex; justify-content: center; ">
        <Component_Button Icon="import" Text="Import" OnClick="Import_OnClick" />
        <Component_Button Icon="export" Text="Export" OnClick="Export_OnClick" />
    </div>

    <h2>Colors</h2>
    @for (var i = 0; i < Selection.data.colors.Count; i++)
    {
        var index = i;
        var color = Selection.data.colors[i];
        <div>
            <input @bind="color.name" />
            <input @bind="color.value" />
            <div class="color" style="background-color: @color.value; "></div>
            <Component_Button Icon="close" OnClick="() => DeleteColor(index)" />
        </div>
    }
    <Component_Button Icon="add" OnClick="AddColor" Style="align-self: center; flex: 0 0 auto; " />
</div>

@using Microsoft.Maui.Storage

@using System.IO

@implements IAsyncDisposable

@inject NavigationManager nav

@code {

    public async ValueTask DisposeAsync()
    {
        await Selection.data.SaveAsync();
    }

    void Back_OnClick()
    {
        nav.NavigateTo("/");
    }

    async Task Import_OnClick()
    {
        var result = await FilePicker.Default.PickAsync();

        if (result is null)
            return;

        var import = await Data.LoadAsync(result.FullPath);
        Selection.data.Add(import);

        await Selection.data.SaveAsync();
    }

    async Task Export_OnClick()
    {
        string path = null;

        var downloadPath = PlatformUtils.GetDownloadFolder();

        while (path is null)
        {
            var ticks = DateTime.Now.Ticks;

            var _path = Path.Combine(
                downloadPath,
                $"data-{ticks}.json"
            );

            if (File.Exists(_path))
            {
                await Task.Delay(1000);
                continue;
            }

            path = _path;
        }

        await Selection.data.SaveAsync(path);
    }

    void Add_OnClick()
    {
        var page = new Page_QrCodeScanner();

        page.Disappearing += async (sender, e) =>
        {
            var dirty = false;

            if (page.ShouldClear)
            {
                Selection.data.items.Clear();
                dirty = true;
            }

            if (page.Item is not null)
            {
                Selection.data.Add(page.Item);
                dirty = true;
            }

            if (dirty)
            {
                await Selection.data.SaveAsync();
            }
        };

        Utils.Navigation.PushModalAsync(page);
    }

    void DeleteColor(int index)
    {
        Selection.data.colors.RemoveAt(index);
    }

    void AddColor()
    {
        Selection.data.colors.Add(new());
    }
}
